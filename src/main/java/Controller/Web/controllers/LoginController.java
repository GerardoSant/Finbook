package Controller.Web.controllers;

import Controller.util.JSONParser;
import Controller.util.sign.FinbookSignValidator;
import Model.User.User;
import View.daos.UserDao;
import SparkApp.SignWebSocket;
//import io.finbook.TextGenerator;
import io.finbook.TextGenerator;
import io.finbook.Verifier;
import spark.Request;
import spark.Response;
import spark.Route;
import Controller.Web.webutils.Path;
import Controller.Web.webutils.ViewUtil;

import java.util.HashMap;
import java.util.Map;

import static Controller.Web.webutils.RequestUtil.*;

public class LoginController {

    public static Route serveLoginPage = (request, response) -> {
        Map<String, Object> model = new HashMap<>();
        model.put("loggedOut", removeSessionAttrLoggedOut(request));
        model.put("redirected", removeSessionAttrLoginRedirect(request));
        model.put("failedLogin", removeSessionAttrLoginFailed(request));
        return ViewUtil.render(request, model, Path.Template.LOGIN);
    };

    public static Route handleLoginPost = (request, response) -> {
        if (userLogInBySign(request)) {
            handleLogInBySign(request, response);
        } else {
            handleStandardLogIn(request, response);
        }
        return null;
    };

    private static void handleLogInBySign(Request request, Response response) {
        byte[] sign = getUserSign(request);
        if (signedTextEqualsToTextSentToSign(request, sign)) {
            /*
            String json= "{\"id\": \"NTMzNzcuOTU4MzIwMTA1MDU=\",\"sign\": [48,-128,6,9,42,-122,72,-122,-9,13,1,7,2,-96,-128,48,-128,2,1,1,49,15,48,13,6,9,96,-122,72,1,101,3,4,2,1,5,0,48,-128,6,9,42,-122,72,-122,-9,13,1,7,1,-96,-128,36,-128,4,24,78,84,77,122,78,122,99,117,79,84,85,52,77,122,73,119,77,84,65,49,77,68,85,61,0,0,0,0,0,0,-96,-128,48,-126,5,-35,48,-126,3,-59,2,1,1,48,13,6,9,42,-122,72,-122,-9,13,1,1,11,5,0,48,-127,-70,49,11,48,9,6,3,85,4,6,19,2,69,83,49,35,48,33,6,3,85,4,8,12,26,76,97,115,32,80,97,108,109,97,115,32,100,101,32,71,114,97,110,32,67,97,110,97,114,105,97,49,15,48,13,6,3,85,4,7,12,6,84,97,102,105,114,97,49,19,48,17,6,3,85,4,10,12,10,70,105,110,98,111,111,107,32,83,76,49,32,48,30,6,3,85,4,11,12,23,65,117,116,111,114,105,100,97,100,32,99,101,114,116,105,102,105,99,97,100,111,114,97,49,16,48,14,6,3,85,4,3,12,7,102,105,110,98,111,111,107,49,44,48,42,6,9,42,-122,72,-122,-9,13,1,9,1,22,29,114,97,117,108,46,108,111,122,97,110,111,46,112,111,110,99,101,57,56,64,103,109,97,105,108,46,99,111,109,48,32,23,13,50,48,48,54,49,51,49,57,51,55,49,52,90,24,15,50,49,50,48,48,53,50,48,49,57,51,55,49,52,90,48,-127,-85,49,21,48,19,6,3,43,5,8,12,12,82,67,79,50,56,49,54,49,48,52,84,49,49,11,48,9,6,3,85,4,6,19,2,69,83,49,35,48,33,6,3,85,4,8,12,26,76,97,115,32,80,97,108,109,97,115,32,100,101,32,71,114,97,110,32,67,97,110,97,114,105,97,49,15,48,13,6,3,85,4,7,12,6,84,97,102,105,114,97,49,16,48,14,6,3,85,4,10,12,7,102,105,110,98,111,111,107,49,15,48,13,6,3,85,4,11,12,6,112,114,117,101,98,97,49,44,48,42,6,9,42,-122,72,-122,-9,13,1,9,1,22,29,114,97,117,108,46,108,111,122,97,110,111,46,112,111,110,99,101,64,104,111,116,109,97,105,108,46,99,111,109,48,-126,2,34,48,13,6,9,42,-122,72,-122,-9,13,1,1,1,5,0,3,-126,2,15,0,48,-126,2,10,2,-126,2,1,0,-66,71,59,-38,-119,-83,-69,94,-98,-121,26,-106,97,48,-36,-70,-75,85,-62,125,113,83,68,-13,-21,120,118,51,-118,119,-36,85,-83,-106,93,-4,61,6,-48,11,-52,-54,-89,123,-45,112,-122,-9,-47,4,-58,42,68,123,-73,-115,74,76,-68,-41,62,61,26,89,14,-80,-92,-97,-20,-90,27,120,46,18,42,-55,118,-122,-119,-88,-3,-23,125,-15,49,-114,-6,36,111,44,34,70,-40,-43,-36,44,-77,4,30,75,61,43,-123,88,-48,-118,-84,-88,91,-17,-122,9,52,22,-5,74,-110,-78,-67,0,118,-32,105,100,-118,44,70,-40,-16,-22,-85,29,8,9,10,74,23,94,-37,123,-95,-95,41,80,-124,4,6,118,-12,99,-94,107,66,44,-109,58,115,-108,88,-66,-20,-74,121,9,-104,-55,27,-60,41,-93,26,77,-52,-7,-47,67,-62,-69,12,-18,67,84,-53,35,112,67,115,-39,18,60,61,-55,-114,-123,110,63,92,-116,-67,-19,122,42,107,66,-60,-113,42,-93,0,-67,88,-120,17,47,-70,-20,111,-63,-15,4,74,-77,89,49,-116,-109,44,-68,-112,-116,40,110,-47,36,46,-51,91,46,-16,36,40,-94,-111,0,-121,49,123,-1,51,-59,122,-32,-66,25,127,44,90,-77,108,-87,37,40,109,-71,113,-106,-37,-57,-13,-56,-109,-50,22,-97,-93,115,44,-15,103,-19,-61,-53,-106,-38,-70,40,-97,107,-57,-34,5,-98,21,-61,-40,-70,24,32,-50,-4,-97,-91,-109,57,0,-82,-1,66,19,-39,37,39,56,95,-39,-36,-25,-10,57,-33,75,57,-113,-49,106,52,-67,105,65,93,91,122,71,27,-11,18,122,56,116,-28,-101,52,-93,-52,-64,39,70,-101,-128,122,37,6,-93,16,-99,-41,-9,44,108,-42,82,127,44,70,125,59,2,60,-62,-36,107,111,73,8,-54,64,-123,107,-91,-125,-16,-11,22,-30,-127,45,-124,-104,-95,-75,-118,38,-117,6,-50,-96,99,-19,41,90,-33,-62,53,-62,-13,-44,26,-66,-95,40,103,96,-114,-77,-88,118,-118,-40,8,-4,118,-82,-103,-52,87,19,-27,-54,-8,-4,3,96,-95,112,24,-98,85,-69,62,95,123,101,70,35,-41,90,-50,-29,89,-33,-41,-5,-44,73,65,-47,13,-52,17,16,77,-126,95,-19,118,-115,-5,23,-6,-116,1,-74,-36,18,105,-88,-122,-49,-16,48,18,-97,82,126,91,89,87,87,-95,-101,-76,106,119,-120,126,102,80,25,30,20,77,10,-106,-117,-84,-33,87,-68,49,62,8,41,2,3,1,0,1,48,13,6,9,42,-122,72,-122,-9,13,1,1,11,5,0,3,-126,2,1,0,-72,108,27,48,-127,6,116,-67,47,-28,-102,-107,18,-82,-87,73,116,54,-45,-58,-44,-21,-112,-117,2,115,47,38,80,45,-76,105,108,-35,22,127,-117,-104,12,-10,126,28,35,125,-91,-97,-51,46,113,-115,-72,-93,-111,64,105,-116,-28,-42,115,-83,-17,31,76,94,74,63,67,-92,-94,82,88,99,30,-75,70,-56,34,-57,76,-9,-32,56,92,110,27,97,43,-110,-88,65,-59,52,-66,40,-98,104,-119,-55,-94,-37,29,-73,-106,-26,43,10,94,99,60,110,4,9,90,-76,17,76,-39,-31,-28,29,-34,-8,52,-69,56,61,7,95,39,93,53,51,80,97,-50,-56,-83,99,-92,10,41,-63,-55,89,-66,91,17,98,-53,-84,-48,-31,-5,-67,-126,115,120,-77,-15,54,25,-47,102,-55,18,-42,127,66,-101,-27,70,110,-62,72,-55,-100,-117,107,53,-43,120,-86,-100,25,-35,38,-3,-40,-48,124,39,10,16,89,39,-14,98,33,27,18,-18,-38,88,68,29,49,-1,-48,84,16,-13,81,-12,86,-117,-35,-29,51,48,-20,-94,124,104,-124,56,94,124,-77,-69,-90,-67,-121,-125,86,-108,-72,-69,101,90,5,107,-73,116,110,-47,-66,114,4,89,-36,-88,-94,-118,123,-115,-86,51,-37,125,72,76,-93,102,-28,11,56,-103,105,-44,-28,-65,107,-28,-60,7,-105,-39,27,119,51,93,-8,-56,40,81,47,-106,-98,-99,-89,-121,1,100,55,-11,-52,97,75,72,-8,-66,-65,-117,-117,-100,14,-73,-2,-100,-33,82,91,-25,17,51,-2,-103,-98,126,10,25,47,-32,67,-14,111,17,90,-43,94,-72,-11,-48,86,72,64,-63,-109,60,22,-126,-83,112,56,-113,63,41,16,40,83,-33,115,-26,68,85,-107,11,66,80,-99,-27,-24,-105,-115,-88,-125,-57,-12,-128,108,88,-37,-35,-52,-51,-103,-45,46,60,20,29,-27,104,-46,-91,-11,-98,-56,20,-16,89,67,63,89,-5,-39,3,-79,9,53,-118,42,-2,45,-111,-77,87,-94,-77,-44,97,-124,111,-113,-52,-113,66,79,20,92,-59,-39,105,49,97,-53,-45,-108,-38,77,30,-23,-53,-102,91,90,-110,109,-72,-12,118,88,-114,-21,-6,39,18,58,-101,-90,111,-46,-16,-11,48,-16,-97,-38,-102,70,7,106,-38,122,32,21,-114,-47,101,100,89,73,-28,20,71,-2,-88,-84,30,1,68,-118,-60,-105,-100,-109,81,-19,-62,-11,3,22,118,120,-32,93,-66,-105,-93,50,-57,45,50,-21,-21,70,117,-42,-16,-57,-76,-107,0,0,49,-126,3,-121,48,-126,3,-125,2,1,1,48,-127,-64,48,-127,-70,49,11,48,9,6,3,85,4,6,19,2,69,83,49,35,48,33,6,3,85,4,8,12,26,76,97,115,32,80,97,108,109,97,115,32,100,101,32,71,114,97,110,32,67,97,110,97,114,105,97,49,15,48,13,6,3,85,4,7,12,6,84,97,102,105,114,97,49,19,48,17,6,3,85,4,10,12,10,70,105,110,98,111,111,107,32,83,76,49,32,48,30,6,3,85,4,11,12,23,65,117,116,111,114,105,100,97,100,32,99,101,114,116,105,102,105,99,97,100,111,114,97,49,16,48,14,6,3,85,4,3,12,7,102,105,110,98,111,111,107,49,44,48,42,6,9,42,-122,72,-122,-9,13,1,9,1,22,29,114,97,117,108,46,108,111,122,97,110,111,46,112,111,110,99,101,57,56,64,103,109,97,105,108,46,99,111,109,2,1,1,48,13,6,9,96,-122,72,1,101,3,4,2,1,5,0,-96,-127,-104,48,24,6,9,42,-122,72,-122,-9,13,1,9,3,49,11,6,9,42,-122,72,-122,-9,13,1,7,1,48,28,6,9,42,-122,72,-122,-9,13,1,9,5,49,15,23,13,50,48,48,55,48,56,49,55,51,57,52,57,90,48,45,6,9,42,-122,72,-122,-9,13,1,9,52,49,32,48,30,48,13,6,9,96,-122,72,1,101,3,4,2,1,5,0,-95,13,6,9,42,-122,72,-122,-9,13,1,1,11,5,0,48,47,6,9,42,-122,72,-122,-9,13,1,9,4,49,34,4,32,48,-119,60,-103,95,39,-106,-94,-95,-111,-107,-15,-16,-68,-45,70,60,-120,-124,-26,19,69,100,-60,107,10,-117,-110,2,51,-14,70,48,13,6,9,42,-122,72,-122,-9,13,1,1,11,5,0,4,-126,2,0,-81,27,1,-112,16,38,-54,109,-90,35,113,91,-104,-57,75,-44,-87,100,47,91,-99,53,37,-38,4,-59,75,-98,-40,102,104,-57,91,19,17,122,-64,-41,-23,30,-118,61,-47,-95,-45,12,103,-66,-72,81,-39,-79,-15,-50,-27,9,87,60,-116,80,72,59,-73,-46,-18,7,-121,-45,-38,7,-75,53,44,24,55,47,27,-107,51,79,18,61,-64,33,-16,8,38,-86,-39,25,-74,-52,22,14,-63,-93,-30,71,121,93,32,125,44,46,122,-42,-18,39,-21,77,75,-11,-49,124,62,71,-108,-76,-73,-109,-6,-41,-41,37,-29,-120,-4,55,-9,15,37,28,-94,-12,15,-70,-118,-80,-97,-127,-25,-88,45,66,-109,-100,99,25,-50,49,-22,108,-95,-1,-125,-79,-87,-127,101,82,-36,-9,-86,53,-123,58,-79,51,-49,-9,-112,-40,28,-25,-33,-44,22,116,-52,-41,-124,97,-107,-15,-46,-116,-59,112,-16,-115,-62,23,-114,85,121,20,-121,88,19,-86,47,17,-91,78,-112,-63,-119,35,-109,14,93,-76,79,-94,23,56,-17,-88,-98,7,24,12,68,79,98,67,41,-27,-44,-77,81,-15,72,-11,9,-17,62,127,19,80,-98,21,58,-94,93,-97,103,-113,-91,20,68,-80,42,-89,-116,-53,127,-68,68,103,124,-108,-106,-53,115,103,-112,38,-11,-106,-84,-121,40,-76,89,-53,-14,-36,-88,-57,-2,-128,24,26,-123,98,15,-44,48,123,38,122,-41,-115,17,116,54,58,74,100,88,-83,-128,-45,58,50,118,-30,-34,-44,-83,-102,92,38,86,19,-125,-93,-97,-106,4,-116,-98,94,51,-104,-33,87,-33,98,-108,-37,36,-72,-34,-119,-25,75,-126,124,-92,-33,1,-97,-2,-53,28,-44,35,-76,-41,16,-25,-121,-67,-111,88,93,102,-41,-117,-112,108,-60,-83,99,115,27,117,75,-28,-84,39,80,68,-33,-99,-14,59,99,-30,29,-81,94,35,29,-70,108,-22,-32,3,88,-41,-45,56,-72,94,-25,-68,-55,-51,112,-125,72,50,-60,-43,68,-38,113,107,103,-102,-50,-105,-67,14,-128,72,-122,64,-90,113,-74,-19,4,-33,-125,55,-128,-120,-120,49,-29,-64,47,59,117,80,-14,43,-105,30,-93,121,20,79,18,90,115,72,12,-77,-111,62,14,65,34,109,41,81,-37,-67,105,125,96,55,63,-70,26,108,-34,-112,9,-54,-126,87,-116,-115,-88,-125,-102,38,-117,35,-15,-72,-6,68,-104,51,-97,0,120,100,42,0,19,-58,116,39,68,-128,-26,112,-15,-80,35,92,-4,-67,-81,0,0,0,0,0,0]}";
            byte[] id = new JSONParser(json).getByteArray("sign");
            System.out.println(new Verifier(id).validateSign());
            */
            logInUser(request,response, getSignAuthor(sign));
        } else {
            redirectToLogin(response);
        }
    }

    private static byte[] getUserSign(Request request) {
        return SignWebSocket.messages.get(request.queryParams("sign"));
    }

    private static boolean signedTextEqualsToTextSentToSign(Request request, byte[] sign) {
        return true;
        //return new FinbookSignValidator().getDecryptedText(sign).equals(getTextSentToSign(request));
    }

    private static String getSignAuthor(byte[] sign) {
        return new FinbookSignValidator().getSignAuthor(sign);
    }

    private static String getTextSentToSign(Request request) {
        return request.queryParams("sign");
    }

    private static void handleStandardLogIn(Request request, Response response) {
        logInUser(request,response, getQueryUsername(request));
    }

    private static void logInUser(Request request, Response response, String userRFC) {
        User user = new UserDao().getUser(userRFC);
        setSessionUser(request, user);
        if(userIsNotLoggedIn(request)) {
            redirectToFailedLogin(request, response);
        } else{
            redirectToDashboard(response);
        }
    }


    private static boolean userLogInBySign(Request request) {
        return request.queryParams("sign") != null;
    }

    public static Route handleLogoutPost = (request, response) -> {
        logOutUser(request, response);
        redirectToLogin(response);
        return null;
    };

    private static void logOutUser(Request request, Response response) {
        request.session().removeAttribute("user");
        request.session().attribute("loggedOut", true);
    }

    public static Route serveSignAwait = (request, response) -> {
        Map<String, Object> model = new HashMap<>();
        model.put("textToSign", TextGenerator.generateRandomText());
        return ViewUtil.render(request, model, Path.Template.SIGNAWAIT);
    };


    public static void ensureUserIsLoggedIn(Request request, Response response) {
        if (userIsNotLoggedIn(request)) {
            request.session().attribute("redirected", true);
            redirectToLogin(response);
        }
    }

    private static boolean userIsNotLoggedIn(Request request) {
        return getSessionUser(request) == null;
    }

    private static void redirectToFailedLogin(Request request, Response response){
        request.session().attribute("failedLogin", true);
        response.redirect(Path.Web.LOGIN);
    }
    private static void redirectToLogin(Response response) {
        response.redirect(Path.Web.LOGIN);
    }

    private static void redirectToDashboard(Response response) {
        response.redirect(Path.Web.DASHBOARD);
    }


}
